/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package productTab;

import historyTab.HistoryModel;
import inventoryTab.InventoryModel;
import java.util.ArrayList;
import java.util.TreeMap;
import java.util.TreeSet;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;

/**
 *  - The name is unique among the Products
 *  - The name has at least one visible character
 *  - The price is a positive double
 *  - There is at least one item selected from the inventory list as a
 *    component of the product
 *  - The components selected have positive amounts
 * 
 * @author Jackson Bailey
 */
public class AddProductWindow extends javax.swing.JFrame {

    private final InventoryModel inventoryModel;
    private final HistoryModel historyModel;
    private final ProductModel productModel;
    private final Object[][] rowData;
    private final String[] columnNames;
    
    /**
     * 
     * @param inventoryModel
     * @param historyModel
     * @param productModel 
     */
    public AddProductWindow(InventoryModel inventoryModel, HistoryModel historyModel, ProductModel productModel) {
        this.inventoryModel = inventoryModel;
        this.historyModel = historyModel;
        this.productModel = productModel;
        String[] inventoryItems = inventoryModel.readInventoryNames();
        columnNames = new String[2];
        columnNames[0] = "Item Name";
        columnNames[1] = "Amount";
        rowData = new Object[inventoryItems.length][2];
        for (int i = 0; i < inventoryItems.length; i++) {
            rowData[i][0] = inventoryItems[i];
            rowData[i][1] = 0;
        }
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        productNameTextField = new javax.swing.JTextField();
        productNameLabel = new javax.swing.JLabel();
        productPriceLabel = new javax.swing.JLabel();
        productPriceTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        componentsTable = new javax.swing.JTable(rowData, columnNames);
        doneButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        productNameLabel.setText("Product Name");

        productPriceLabel.setText("Product Price");

        jScrollPane1.setViewportView(componentsTable);

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(productPriceLabel)
                            .addComponent(productNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(productNameTextField)
                            .addComponent(productPriceTextField)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 5, Short.MAX_VALUE)
                        .addComponent(doneButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)
                        .addGap(247, 247, 247))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productNameLabel)
                    .addComponent(productNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productPriceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doneButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        Product newProduct = new Product();
        newProduct.setName(productNameTextField.getText());
        try {
            newProduct.setPrice(Double.parseDouble(productPriceTextField.getText()));
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Something is wrong with the price's formatting. Try ###.##");
            return;
        }
        TreeMap<String, Integer> components = new TreeMap<String, Integer>();
        for (int i = 0; i < rowData.length; i++) { //for each row
            if (rowData[i][1].toString().equals("")) { //If there's nothing written for amount
                continue; //skip this row
            }
            Integer amount;
            try {
                amount = Integer.parseInt(rowData[i][1].toString()); //If the amount isn't an amount
            } catch (NumberFormatException e) { //catch the error
                JOptionPane.showMessageDialog(null, "The amount for item " + rowData[i][0].toString() + " is improperly formatted.");
                return;
            }
            if(amount == 0) { //ignore zeroes
                continue;
            }
            if(amount < 0) { //If the amount is negative
                JOptionPane.showMessageDialog(null, "Amounts must not be negative"); //Don't allow it
                return;
            }
            newProduct.addComponent(rowData[i][0].toString(), amount);
        }
        //TODO Consider placing this above instead
        if (
            newProduct.getName() == null ||
            newProduct.getPrice() == null ||
            newProduct.getName().equals("") ||
            newProduct.getPrice() < 0.0
        ) {
            JOptionPane.showMessageDialog(null, "Products must have a non empty price and name. Price must be above $0.00");
            return;
        }
        ArrayList<Product> products = productModel.getProducts();
        for (Product p : products) {
            if (p.getName().equals(newProduct.getName())) {
                JOptionPane.showMessageDialog(null, "Products must have unique name, there is a product with the same name as this!");
                return;
            }
        }
        productModel.addProduct(newProduct);
        this.dispose();
    }//GEN-LAST:event_doneButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JTable componentsTable;
    private javax.swing.JButton doneButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel productNameLabel;
    private javax.swing.JTextField productNameTextField;
    private javax.swing.JLabel productPriceLabel;
    private javax.swing.JTextField productPriceTextField;
    // End of variables declaration//GEN-END:variables
}
